<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lantao</title>
  
  <subtitle>最怕一声碌碌无为，还说平凡难得可贵</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-06T09:45:58.469Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>兰涛</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/06/06/hello-world/"/>
    <id>http://yoursite.com/2019/06/06/hello-world/</id>
    <published>2019-06-06T08:17:46.637Z</published>
    <updated>2019-06-06T09:45:58.469Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>多线程的宏观和微观视角</title>
    <link href="http://yoursite.com/2019/06/04/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%AE%8F%E8%A7%82%E5%92%8C%E5%BE%AE%E8%A7%82%E8%A7%86%E8%A7%92/"/>
    <id>http://yoursite.com/2019/06/04/多线程的宏观和微观视角/</id>
    <published>2019-06-04T07:33:05.000Z</published>
    <updated>2019-06-06T09:45:12.662Z</updated>
    
    <content type="html"><![CDATA[<p>首先我们在做并发编程的的时候会考虑到原子性丶可见性和有序性，在宏观上会考虑到安全性丶活跃性和性能；</p><a id="more"></a><h2 id="微观视角"><a href="#微观视角" class="headerlink" title="微观视角"></a>微观视角</h2><ul><li><strong>可见性</strong>: 一个线程对共享变量的修改，另外一个线程能够立刻感知到，我们称为可见性;</li><li><strong>原子性</strong>： 一个或者多个操作在 CPU 执行的过程中不被中断的特性称为原子性；</li><li><strong>有序性</strong>：就是我们代码的执行顺序，依赖等。(指令重排导致顺序被打乱);</li></ul><hr><p>&#8195;&#8195;<strong>线程工作内存：</strong> 是指 Cpu 的 <strong>‘寄存器’</strong> 和 <strong>‘高速缓存’</strong>，线程的 工作内存/本地内存 是指cpu的寄存器和高速缓存的抽象描述,数据读取顺序优先级 是：<strong>寄存器－&gt;高速缓存－&gt;内存</strong></p><hr><h2 id="宏观视角"><a href="#宏观视角" class="headerlink" title="宏观视角"></a>宏观视角</h2><ul><li><strong>安全性</strong>：安全性我认为其实是包含了原子性丶可见性和有序性的，是一个总的概念，在程序开发的时候首先要注重安全性，会在下面详细解释这三点；</li><li><strong>活跃性</strong><br>活跃性告诉我们的是要避免死锁，饥饿和活锁；<br><strong>— 死锁</strong>：这个都不陌生，线程A持有1锁，等待获取2锁，线程B持有2锁，等待获取1锁，这就是个典型的死锁，就就是阻塞了。<br><strong>— 饥饿</strong>：饥饿当多线程获取锁都得时候，总有线程没有机会获取到锁，出现饥饿的三中情况：<strong>1-高优先级的线程吞噬了低优先级线程的CPU使用权 2-线程被一直阻塞(比如Thread.Sleep) 3-等待线程永远不被唤醒</strong>，也可以理解为锁的优先级，我们常用的synchronized就是非公平锁，例如线程A，B,C按顺序获取锁1，首先是A获取到了锁，执行完临界区代码释放了锁，这是线程D来了直接获取到了锁，这就是非公平锁；ReentrantLock()默认是非公平锁，可以在ReentractLock（true）创建公平锁；</li></ul><p><strong>— 活锁</strong>：在生活中A和B同时进入左手门，为了不发生碰撞，A和B互相礼让同时进入了右手门，为了不发生碰撞又进入了左手们会一直循环下去，<strong>实例代码找到适用的场景在增加</strong></p><ul><li><strong>性能</strong><br>1：<strong>延迟:</strong> 延迟就是指一个请求调用到返回所使用的时间，时间越短，程序的处理的就越快，性能也就会高；<br>2：<strong>吞吐量:</strong> 吞吐量就是值在单位时间内(秒)处理的请求数量，吞吐量越大，程序处理的请求就越多，性能也越好；</li></ul><hr><h3 id="可见性：线程工作空间导致可见性问题"><a href="#可见性：线程工作空间导致可见性问题" class="headerlink" title="可见性：线程工作空间导致可见性问题"></a>可见性：<strong>线程工作空间导致可见性问题</strong></h3><p>&#8195;&#8195;例如：线程A在主存中年将变量age=0拉去到自己的工作内存中，然后做了age = 5，当然这个操作是在cpu的寄存器中进行的，然后写会高速缓存中，这时线程A的高速缓存还未执行同步主内存的操作，线程B又将age=0从主存拉取到了线程B的工作内存中，导致A线程已经更新但是B线程看不到的可见性问题；</p><p><img src="https://github.com/lantaoGitHub/photos/blob/master/Concurrency/%E5%85%B1%E4%BA%AB%E5%8F%98%E9%87%8F%E5%8F%AF%E8%A7%81%E6%80%A7.png?raw=true" alt="%E5%85%B1%E4%BA%AB%E5%8F%98%E9%87%8F%E5%8F%AF%E8%A7%81%E6%80%A7.png"></p><h3 id="原子性：线程切换导致原子性问题-count"><a href="#原子性：线程切换导致原子性问题-count" class="headerlink" title="原子性：线程切换导致原子性问题 ++count"></a>原子性：<strong>线程切换导致原子性问题 ++count</strong></h3><p>&#8195;&#8195;例如：当线程A从<strong>主内存</strong>中将共享变量Count加载到线程A的<strong>工作内存</strong>后，发生了线程切换，这个时候线程B也将共享变量Count从<strong>主内存</strong>加载到了线程B的<strong>工作内存</strong>，这时<strong>线程A和B的工作内存中count都是0</strong>，线程B执行了Count = Count + 1,然后写回到<strong>主内存</strong>，这时候线程切换完成，回到了线程A再次执行 Count = Count + 1,再将线程A<strong>工作内存计算过</strong>的count写回主内存，现在我们得到的主内存呢中Count值是1而不是2。</p><p><img src="https://github.com/lantaoGitHub/photos/blob/master/Concurrency/%E7%BA%BF%E7%A8%8B%E5%88%87%E6%8D%A2%E5%AF%BC%E8%87%B4%E5%8E%9F%E5%AD%90%E6%80%A7%E9%97%AE%E9%A2%98++count%20.png?raw=true" alt="%E7%BA%BF%E7%A8%8B%E5%88%87%E6%8D%A2%E5%AF%BC%E8%87%B4%E5%8E%9F%E5%AD%90%E6%80%A7%E9%97%AE%E9%A2%98%2B%2Bcount%20.png"></p><h3 id="有序性：指令重排导致有序性问题；"><a href="#有序性：指令重排导致有序性问题；" class="headerlink" title="有序性：指令重排导致有序性问题；"></a>有序性：<strong>指令重排导致有序性问题；</strong></h3><p>在这里讲一个例子，就是获取单例双重检查锁(double-checked locking)判断：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @Auther: lantao</span><br><span class="line"> * @Date: 2019-03-28 14:32</span><br><span class="line"> * @Company: 随行付支付有限公司</span><br><span class="line"> * @maill: lan_tao@suixingpay.com</span><br><span class="line"> * @Description: TODO</span><br><span class="line"> */</span><br><span class="line">public class Test1 &#123;</span><br><span class="line">    </span><br><span class="line">    private DoMain doMain;</span><br><span class="line">    </span><br><span class="line">    public DoMain getDoMain()&#123;</span><br><span class="line">        if(doMain == null)&#123;</span><br><span class="line">            synchronized (this.getClass())&#123;</span><br><span class="line">                if(doMain == null)&#123;</span><br><span class="line">                    doMain = new DoMain(&quot;&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                return doMain;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return doMain;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#8195;&#8195;在上边的代码中在synchronized内和外都有一个if判断，判断doMain是否为null操作，有很多人对synchronized中的if null判断不理解，其实可以这样想，线程A和线程B都执行到了synchronized这里进行竞争锁，结果A得到锁，判断if null，结果还未实例化，继续进行实例化，然后return对象并释放锁，这时线程B获取到了锁进入if null判断，发现doMain已经被线程A实例化过了，直接返回实例即可，第二个if null的作用就在这里；</p><p>看上去上边的代码是完美的，但是new的操作上我们理解是：</p><ul><li>创建内存M</li><li>在内存M上初始化doMain对象</li><li>将内存M的地址指向变量doMain</li></ul><p>但是实际上优化后(指令重排)的执行路径可能是这样的：</p><ul><li>创建内存M</li><li>将内存M的地址指向变量doMain</li><li>将内存M的地址指向变量doMain</li></ul><p><img src="https://github.com/lantaoGitHub/photos/blob/master/Concurrency/%E6%9C%89%E5%BA%8F%E6%80%A7%E9%97%AE%E9%A2%98.png?raw=true" alt="%E6%9C%89%E5%BA%8F%E6%80%A7%E9%97%AE%E9%A2%98.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先我们在做并发编程的的时候会考虑到原子性丶可见性和有序性，在宏观上会考虑到安全性丶活跃性和性能；&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
